
范例：
	docker-compose up  #启动所有容器
	docker-compose up -d  #后台启动并运行所有容器
	docker-compose up --no-recreate -d  #不重新创建已经停止的容器
	docker-compose up -d test2  #只启动test2这个容器
	docker-compose stop  #停止容器
	docker-compose start  #启动容器
	docker-compose down #停止并销毁容器


1.安装
	apt-get install python-pip
	pip --proxy=http://11.32.1.20:808 install docker-compose
	# 其中：--proxy=http://11.32.1.20:808 由于我的环境需要代理才能上网，所以配置的代理地址，如果您的网络不需要代理可以上外网，则不需要该参数；或者修改成您自己的代理地址。

2.编写配置文件
	vim docker-compose.yaml
	test1:
	  image: "10.8.52.225:5000/base:v1.2.1_autoserver"
	  ports:
	    - "1022:22"
	    - "1080:80"
	  volumes:
	    - /work/test1:/work
	  dns:
	    - 10.1.2.9
	    - 10.1.2.70
	  hostname: test1

	test2:
	  image: "10.8.52.225:5000/base:v1.2.1_autoserver"
	  ports:
	    - "1023:22"
	  volumes:
	    - /work/test2:/work
	  dns: 10.1.2.9
	  hostname: test2
	  links:
	    - els1:db

	# 其中："10.8.52.225:5000" 是我自己的私有仓库地址

3.命令的使用
	up
	构建，（重新）创建，启动，链接一个服务相关的容器。
	链接的服务都将会启动，除非他们已经运行。
	默认情况， docker-compose up 将会整合所有容器的输出，并且退出时，所有容器将会停止。
	如果使用 docker-compose up -d ，将会在后台启动并运行所有的容器。
	默认情况，如果该服务的容器已经存在， docker-compose up 将会停止并尝试重新创建他们（保持使用 volumes-from挂载的卷），以保证 docker-compose.yml 的修改生效。如果你不想容器被停止并重新创建，可以使用 docker-compose up --no-recreate。如果需要的话，这样将会启动已经停止的容器。
	start
	启动一个已经存在的服务容器。
	stop
	停止一个已经运行的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。


